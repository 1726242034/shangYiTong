MybatisPlus的主键策略
    ASSIGN_ID
        MyBatis-Plus默认的主键策略是：ASSIGN_ID（使用了雪花算法）
            @TableId(type = IdType.ASSIGN_ID)
            private String id;

        雪花算法：分布式ID生成器
            雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。

        核心思想：
            生成的长度共64bit（一个long型）。

            首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0。
            41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。
            10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID，可以部署在1024个节点）。
            12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。
            优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。

    AUTO 自增策略
        需要在创建数据表的时候设置主键自增，实体字段中配置 @TableId(type = IdType.AUTO)
            @TableId(type = IdType.AUTO)
            private Long id;

        要想影响所有实体的配置，可以在application配置文件内设置全局主键配置
        全局设置主键生成策略: mybatis-plus.global-config.db-config.id-type=auto


    MybatisPlus自动填充数据
        FieldFill.INSERT_UPDATE 添加和更新的时候自动填充数据, 填充的操作需要自定义一个类然后实现'MetaObjectHandler'接口
            @TableField(fill = FieldFill.INSERT_UPDATE)
            private Integer age;

            @Component
            public class UserMetaObjectHandler implements MetaObjectHandler {
                @Override   添加操作执行的方法
                public void insertFill(MetaObject metaObject) { this.setFieldValByName("age",20,metaObject); }

                @Override   更新操作执行的方法
                public void updateFill(MetaObject metaObject) { this.setFieldValByName("age",20,metaObject); }
            }




















