网络

ipconfig查询IP地址
    无线局域网适配器 WLAN:
    描述. . . . . . . . . . . . . . . : Intel(R) Wi-Fi 6 AX201 160MHz
    物理地址. . . . . . . . . . . . . : 8C-C6-81-54-FF-9C
    IPv4 地址 . . . . . . . . . . . . : 192.168.0.109(首选)
    子网掩码 . . . . . . . . . . . . : 255.255.255.0

    物理地址：mac地址也叫物理地址和局域网地址，主要用于确认网上设备的地址 类似于身份证号具有唯一标识
        每一个网卡制作完成之后就带有一个mac地址且永远不会改变

    IP地址：就是你在网络中的具体位置，可以改变

计算机之间怎么发送数据？
    双绞线
        如果只有两台计算机 就可以使用双绞线(网线)连接，就可以互相发送消息组成一个小网络。

    集线器
        如果有多台计算机 可以使用hub(集线器)，一个电脑发送信息到集线器 集线器负责广播到其他的计算机。

    交换机
        由于集线器的问题，我们经常需要发送消息到特定的计算机而不是广播，
        所以一个新的设备就出现了叫做交换机(switch)。交换机可以记录每一个设备的弟子和接口的对应关系。

        交换机中有一张表记录了连接此交换机的设备的信息，结构如下：头部(源地址，目的地址)mac地址，数据。
        A给B发消息，先将消息发送给交换机 交换机再转发给B。但是交换机并不知道B在哪 所以就会先给所有设备发送消息，
        由于消息的头部记录了目标地址和源地址 所以B收到消息之后就会做出响应 此时交换机就知道B了

        交换机效率比较高 而且可以进行桥接

    路由器
        一般的交换机也就能存几千个地址，当网络内的设备多起来之后 只要交换机找不到对应设备就会广播，
        而且如果地址表满了新地址就会覆盖旧地址导致重新寻找效率低，所以就引入了一个设备叫做路由器。
        (注意路由器不是猫 猫是调制解调器，调制解调器的作用是将进来的光信号转换为电信号。)

        交换机之间都是使用mac地址进行数据传输，有了网络这个抽象概念之后ip地址就应运而生了。
        IP地址只要是用来表示计算机的网络位置，它处于哪一个网络 IP地址和子网掩码会共同定位出一个计算机在网络中的位置。

        IP地址和子网掩码其实就是个32位的二进制数字
        IP地址 192.168.32.9：
            其中192.168.32表示网络号、
            9是主机号 表示网络中的哪个设备

        此时发送消息的消息头就会再包含一个消息的头部：
            ip头部(源地址192.168.100.10 目的地址192.168.200.20)ip地址   头部(源地址，目的地址)mac地址   数据。
            其中 ip数据包在mac头部内 以此类推，想要获取ip数据就需要先解析mac头部。

        家用路由器 有个wan口 好几个lan口，wan口用来连接互联网端，lan口用来连接家庭设备，这两个口都有一个网卡，
        一个网卡属于互联网网络(10.25.23.65)，另一个属于内部网络(192.168.0.1)，内部网路和外部互联网的数据转发由路由器内部实现。
        路由器内有路由表。网络内传输，就有了网关的概念。
        ip不能直接进行传输，因为网络内的交换机不支持ip地址，所以通信要转换为mac地址 根据ip查找mac地址

        arp协议：要进行广播 会先问一问哪个mac地址的ip是192.168.0.1，他收到就会回应

        Internet控制报文协议 ICMP(internet Control Message Protocol)
            他是TCP/IP协议簇的一个子协议，用于在IP主机 路由器之间传递控制消息。
            控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。
            这些控制消息虽然并不传输用户数据，但对于用户数据的传递起着重要的作用。

        NAT协议(Network Address Translation 网络地址转换)
            每台设备都分配一个ip当然能实现网络的建立 但是事实上IP地址是有限的，能使用的只有40亿左右。
            于时一般的做法是家里放一个路由器，所有设备都通过路由器进行连接，连接在内网。
            比如内网ip是192.168.100.10，他会在路由器内转换为公网ip 10.25.168.5，由公网ip去访问外网。

域名
    域名需要购买 即'www.baidu.com'，域名指向了一个ip地址，域名要在域名服务器中查询此域名对应的ip地址 查询到ip地址之后就会去访问这个ip地址。

网络七层协议：
    osi七层协议：1.物理层、2.数据链路层、3.网络层、4.运输层、5.会话层、6.表示层、7.应用层
    TCP/IP四层协议：1-2网络接口、3网际层IP、4运输层(TCP、UDP)、5-7应用层(各种应用层协议和TELNET、FTP、SMTP等)
    五层协议：1物理层、2数据链路层、3网络层、4运输层、5-7应用层

    osi七层协议执行流程
        客户端接收数据
            物理层接收数据给数据链路层，数据链路层会解析数据包的mac头部，
            网络层会解析数据包的ip地址将其翻译成对应的物理地址，运输层解析数据包的TCP协议，最终到解析完成传给应用层

        客户端传输数据
            应用层把数据给传输层，传输层建立链接 向网络层提供合适的服务，网络层会给数据加IP头部然后给数据链路层，
            数据链路层会给数据加mac头部，最后通过物理层传输数据。

         OSI层        功能
        应用层：用户接口 应用程序(文件传输、电子邮件、文件服务、虚拟终端)
        表示层：数据的表示、压缩和加密(数据格式化、代码转换、数据加密)
        会话层：会话的建立和结束(解除或者建立与别的接点的联系)
        传输层：按照网络能处理的最大尺寸将数据包进行强制分割，发送给对方
        网络层：将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接受方
        数据链路层：物理地址寻址，数据的成帧，流量控制，数据的检错，重发等
        物理层：建立、维护、断开物理连接


TCP协议
    TCP 数据包的大小
        以太网数据包(packet)的大小是固定的，最初是1518字节，后来增加到1522字节。其中 1500字节是负载(payload)，22字节是头信息(head)。
        IP数据包在以太网数据包的负载里面，它也有自己的头信息，最少需要20字节，所以IP数据包的负载最多为1480字节。

    TCP 数据包的编号(SEQ)
        一个包1400字节，那么一次性发送大量数据，就必须分成多个包。比如一个10MB的文件，需要发送7100多个包。
        发送的时候，TCP协议为每个包编号(sequence number 简称SEQ)，以便接收的一方按照顺序还原。万一发生丢包，也可以知道丢失的是哪一个包。
        第一个包的编号是一个随机数。假设这个随机数是1 负载长度是100字节，那么就可以推算出下个包的编号是101(1+100)。
        也就是说每个数据包可以获取两个编号：自身的编号以及下一个包的编号，此时就可以指定下一次要接收的包的编号了。

    TCP 数据包的组装
        收到TCP数据包以后，组装还原是操作系统完成的 应用程序不会直接处理TCP包。操作系统不会去处理TCP数据包里面的数据。
        一旦组装好TCP数据包，就把它们转交给应用程序。TCP数据包里面有一个端口(port)参数，就是用来指定转交给监听该端口的应用程序。

    慢启动和 ACK
        发送数据包当然是越快越好，但是发的越快越容易丢包，所以TCP就设计了一个慢启动(slow start)机制。
        就是刚开始的时候发的较慢，然后根据丢包的情况调整速率，如果不丢包就加快速度 反之降低速度。

        默认情况下，接收方每收到两个TCP数据包，就要发送一个确认消息。"确认"的英语是Acknowledgement，所以这个确认消息就简称ACK。
        每个ACK都带有下一个数据包的编号，以及接收窗口的剩余容量。双方都会发送ACK。ACK通常与数据合并在一个数据包里面发送。

    数据包的遗失处理
        每一个数据包都带有下一个数据包的编号。如果下一个数据包没有收到，那么ACK的编号就不会发生变化。
        比如现在收到了4号包 但是没有收到5号包，ACK就会记录 期待收到5号包。过了一段时间5号包收到了，那么下一轮ACK会更新编号。
        如果5号包还是没收到 但是收到了6号包或7号包，那么ACK里面的编号不会变化 总是显示5号包。这会导致大量重复内容的ACK。
        如果发送方发现收到三个连续的重复ACK 或者超时了还没有收到任何ACK 就会确认丢包，即5号包遗失了，从而再次发送这个包。

    三次握手
        三次握手是来保证客户端和服务端都可以发送数据 也可以接收数据的
        第一次握手：客户端先给服务器发送一个TCP报文请求建立连接()。
        第二次握手：服务端响应一下 表示收到请求(证明了服务端可以接收数据 以及客户端可以发送数据)
        第三次握手：然后客户端再发送数据(证明了客户端可以接收数据 以及服务端可以发送数据)
        第三次握手是客户端表示 可以接收到服务端的信息。如果没有第三次握手，那么服务端就无法确定客户端是否接收到了自己的消息
        三次握手之后 TCP连接建立

        详情
            客户端发送一个'SYN=1' 表示想要建立连接 并且会随机生成一个seq=x的报文序列号。
            服务端收到请求建立的'SYN'报文之后就会回复给客户端一个报文：SYN=1 ACK=1 ack=x+1 seq=y。
                服务端也发送一个'SYN'表示要建立连接、ACK表示这是一条应答信息、
                ack表示下次客户端要发送一个seq+1的报文(报文是连续的 如果中间断了就表示数据有问题)、seq表示把报文的序列号。
            客户端发送一个：ACK=1 ack=y+1的报文，ACK表示这是一条应答消息，ack表示收到了服务端发送的seq报文 下次需要的是seq+1的报文

    四次挥手
        第一次挥手：客户端发送一个'FIN=1 seq=m'表示想要断开连接
        第二次挥手：服务端接收到之后给了一个响应的报文'ack=seq+1'表示确认应答，(此时客户端的数据传输完成了 但是服务端不一定传完了)
        第三次挥手：在服务器的数据传输完成之后，发送一个'FIN=1'的报文 表示请求断开连接
        第四次挥手：客户端接收到之后返回一个响应的报文'ACK=1'，表示这是一条应答信息 确认应答
        四次挥手之后 连接断开


UDP协议
    UDP是User Datagram Protocol的简称，中文名是用户数据报协议，
    是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。

    UDP不进行连接 只管发数据，即使目标没有收到数据也不会管。
    比如聊天下文件就不可以使用UDP 因为不可以丢失数据。而看直播就可以UDP 视频中间卡一下丢一秒的画面是没什么问题的。


HTTP协议
    超文本传输协议(HyperText Transfer Protocol 缩写：HTTP)是一种用于分布式、协作式和超媒体信息系统的应用层协议。
    HTTP是一个客户端终端(用户)和服务器端(网站)请求和应答的标准(TCP)。

    通过使用网页浏览器或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口(默认端口为80)。我们称这个客户端为用户代理程序(user agent)。
    应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器(originServer)。

    通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口(默认是80端口，https的默认端口是443)的连接。
    HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，
    比如"HTTP/1.1200 OK"，以及返回的内容，如请求的文件、错误消息、或者其它信息。

    HTTP工作原理
        HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。
        客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，
        响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。

    以下是 HTTP 请求/响应的步骤：
        1. 客户端连接到Web服务器
            浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址，一个HTTP客户端，通常是浏览器，
            与Web服务器的HTTP端口(默认为80)建立一个TCP套接字连接。例如http://www.luffycity.com。
        2. 发送HTTP请求
            通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。
            请求头部：请求头部是用来告诉服务器自己的一些状态等，描述请求本身的一些特性

        3. 服务器接受请求并返回HTTP响应
            Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。
        4. 释放连接TCP连接
            若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;
            若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;
        5. 客户端浏览器解析HTML内容
            客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。
            客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。

    http协议是基于TCP/IP协议之上的应用层协议。基于 请求-响应 的模式

    HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并返回。
    换句话说,肯定是先从客户端开始建立通信的,服务器端在没有接收到请求之前不会发送响应，服务端不能主动说话。

    无状态
        HTTP是一种不保存状态，即无状态(stateless)协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。
        也就是说在HTTP这个级别,协议对于发送过的请求或响应都不做持久化处理。
        使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。
        这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成如此简单的。可是随着Web的不断发展,
        因无状态而导致业务处理变得棘手的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的其他页面后,也需要能继续保持登录状态。
        针对这个实例,网站为了能够掌握是谁送出的请求,需要保存用户的状态。HTTP/1.1虽然是无状态协议,但为了实现期望的保持状态功能,
        于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管理状态了。

    无连接
        无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。
        采用这种方式可以节省传输时间，并且可以提高并发性能，不能和每个用户建立长久的连接，请求一次响应一次，服务端和客户端就中断了。
        但是无连接有两种方式，早期的http协议是一个请求一个响应之后，直接就断开了，但是现在的http协议1.1版本不是直接就断开了，
        而是等几秒钟，这几秒钟是等什么呢？等着用户有后续的操作，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，
        如果过了这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的，
        默认的好像是3秒中现在，但是这个时间是可以通过后端的代码来调整的，自己网站根据自己网站用户的行为来分析统计出一个最优的等待时间。
